import{_ as l,c as e,o as i,ae as t}from"./chunks/framework.C-ckEMbm.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"技术目标.md","filePath":"技术目标.md"}'),r={name:"技术目标.md"};function o(p,a,n,s,_,c){return i(),e("div",null,a[0]||(a[0]=[t('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><blockquote><p>业务需求一个接着一个的来，技术团队拼尽全力去实现，这个是必须的。因为对于团队来说，实现业务目标是基础，如果这个都做不到的话，那么可能团队存在的意义也就没有了。</p></blockquote><p>业务需求其实是做不完的，在资源和时间都有限的情况下，面对着业务压力，技术团队一路只是做业务需求的话，会有几个问题：</p><ul><li>会留下技术债，比如说，用一些临时性的方案去实现业务需求。长期这么做的话，系统会越来越难以维护，那么自然的，开发效率会越来越低，且越来越容易出事，也就会直接影响到实现业务需求的速度和产品本身的稳定性；</li><li>团队积极性会不高，因为组员会觉得一路做业务需求，对自己的技术累积没多少价值；</li><li>团队没有一个稳定性的目标，业务目标是不断演变且有周期性的，大部分情况下还是以项目的形式进行。这样的话，团队并没有一个相对长期的目标，也就相当于没有一个指南针，渐渐的，团队组员的焦虑会越来越大，会有疑问，我们到底要去哪？另外，我们也很难保证业务需求实现后，就一定有非常大的价值，也有可能是在瞎忙。</li></ul><p>因此因此因此，团队需要设置另外一个目标，技术目标，目的是为了增强团队的内在定力。</p><h2 id="找到自己团队的技术目标" tabindex="-1">找到自己团队的技术目标 <a class="header-anchor" href="#找到自己团队的技术目标" aria-label="Permalink to &quot;找到自己团队的技术目标&quot;">​</a></h2><p>业务目标一般都是自上而下的，而技术目标是可以自下而上的，每个团队由于职能不同，技术目标这块，考核的维度也是不同的，不过每个团队都应该有自己的核心评价维度。有些团队的技术目标，是安全，而有些则是监控，有些则是性能。</p><p>以茶饮行业的订单系统为例子，由于这个行业是有门店业务的，一旦订单系统出事，那将会影响所有的门店，店员一下子就无法正常工作了，也就直接影响到实际的用户，且出事后，处理速度还快不了，一大堆手尾问题要去善后。</p><p>因此从茶饮行业订单系统的特殊性，以及系统出事后，导致的问题严重性，就得给订单团队定一些技术目标：</p><ul><li>秒级监控，出事后，要能在多少秒内感知到。可能刚开始做不到，但是你可以按照里程碑来，先是做到分钟级别的，后面做到秒级的；</li><li>需要有快速处理手尾问题的工具，万一系统突然出事了，且后面系统恢复后，订单团队必须得有快速善后的高效工具，用最快的速度处理手尾问题，降低影响；</li></ul><p>就上面两个技术目标就够了吗？肯定不是的，订单业务属于偏后端偏规划的，根据公司和团队的实际情况，肯定有其他的技术目标，比如说订单中心、订单履约、订单归档、订单垂直拆库、订单解耦独立服务、订单模块化等等。</p><p>针对故障而设置的技术目标，效果会很快就看到。但是像订单独立服务、订单垂直拆库、订单模块化等，短期则是看不到效果的，不做这个，在功能层面，系统依然是能使用的，至少在业务方看来确实是这样的。但是这里有个产品内功的问题，一直忽视它的话，长期下去，代码越来越难维护，Bug 越来越容易出现，开发效率会严重降低，也就直接影响到业务需求的高质量快速交付，这个也是业务方最终不愿意看到的。</p><p>团队的技术领导者，其中一项关键工作，就是识别和找到这些技术目标，并推动去实施落地，当中难免会跟业务目标起冲突，那么如何达到一个好的平衡，就要看技术领导者的功力了。</p><h2 id="想办法去实现技术目标" tabindex="-1">想办法去实现技术目标 <a class="header-anchor" href="#想办法去实现技术目标" aria-label="Permalink to &quot;想办法去实现技术目标&quot;">​</a></h2><p>一直只实现业务目标或者一直只实现技术目标，都是不行的，这里有个短期收益和长期收益的权衡问题，需要根据团队的职能和实际情况，找到一个合适的占比，比如说，20%的时间用于做技术需求。但无论如何都要想办法去实现一些技术目标，具体可以如下操作：</p><ul><li>技术需求跟着业务需求上线，这个我之前在技术经理成长复盘-大重构提到过，具体可以看一下这篇文章；</li><li>跟产品经理说清楚当前阶段实现这个技术需求的目的，并争取得到产品的认可。有一些技术需求不做，已经开始在影响【做业务需求】的速度了，这个也是产品经理不愿意看到的；</li><li>也可以从提高用户体验的维度去跟产品谈；</li><li>出现过故障的，必须立刻去做这个技术优化；</li><li>业务需求也不可能每时每刻接连不断的，总有缓一缓节奏没那么快的时候，这个时候赶紧抽时间去做技术项目；</li><li>看看能不能立项，按照实际的项目来做，当然这个得技术老大跟业务老大已达成一致了；</li><li>必要的时候，加班去实现技术目标，因为这个是有价值的，最终也是为了后续无须为一个烂系统，动不动就去加班。</li></ul><p>当然你不能说，连业务需求都不去实现，直接去做技术需求，这个肯定不行的，就如上文提到的，实现业务需求是团队至少要做到的。</p><p>另外，技术目标最终也是为业务目标服务的，就算是非常前瞻性的技术目标，最终目的也是为了业务。平时也可以多多分析业务，逆推出一些技术目标</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>多做一些技术目标，是为了系统越来越好，团队越来越好，执行效率越来越高，最终还是服务于业务目标的，需要找到一个合适的平衡点，去实现一些技术目标。</p>',20)]))}const u=l(r,[["render",o]]);export{h as __pageData,u as default};
